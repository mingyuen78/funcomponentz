{"version":3,"sources":["components/widgets/CustomAppBar.js","components/utils/CAPIHelper.js","components/utils/LoopRender.js","components/pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["CustomAppBar","props","React","useState","anchorEl","setAnchorEl","open","setOpen","title","loading","setLoading","error","message","setMessage","menuList","label","url","handleClose","evt","handleMenuClick","toggleDrawer","event","type","key","useEffect","AppBar","position","Snackbar","anchorOrigin","vertical","horizontal","Boolean","onClose","id","Toolbar","IconButton","edge","color","aria-label","onClick","Typography","variant","style","flex","aria-haspopup","currentTarget","keepMounted","MenuItem","SwipeableDrawer","onOpen","role","width","onKeyDown","List","map","item","index","ListItem","button","ListItemText","primary","LinearProgress","instance","CAPIHelper","this","_type","value","console","log","LoopRender","data","setData","Name","Home","setItem","loaded","setLoaded","snackbar","setSnackbar","refresh","setRefresh","apiHelper","a","async","axios","get","constructor","googleSheetURL","timeout","then","response","Result","catch","finally","Box","getAttribute","p","App","Fragment","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c32b5be9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport MoreIcon from \"@material-ui/icons/MoreVert\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\n\r\n// Props is flowed in like parameters.\r\nfunction CustomAppBar(props) {\r\n  // We use React useState Hook to simulate constructor state.\r\n  // every useState can optionally assign default value and have a reflector method set in second param\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [title] = React.useState(props.title);\r\n  const [loading, setLoading] = React.useState(props.loading);\r\n  const [message, setMessage] = React.useState(props.error);\r\n\r\n  const menuList = [\r\n    { label: \"Home\", url: \"\" },\r\n    { label: \"Form\", url: \"\" }\r\n  ];\r\n  const handleShowMore = evt => {\r\n    setAnchorEl(evt.currentTarget);\r\n  };\r\n  const handleClose = evt => {\r\n    setAnchorEl(null);\r\n    // Pass event to parent;\r\n    props.handleMenuClick(evt);\r\n  };\r\n  const toggleDrawer = open => event => {\r\n    if (\r\n      event &&\r\n      event.type === \"keydown\" &&\r\n      (event.key === \"Tab\" || event.key === \"Shift\")\r\n    ) {\r\n      return;\r\n    }\r\n    setOpen(open);\r\n  };\r\n\r\n  const generateDrawerList = () => {\r\n    return (\r\n      <div\r\n        role=\"presentation\"\r\n        style={{ width: 200 }}\r\n        onClick={toggleDrawer(false)}\r\n        onKeyDown={toggleDrawer(false)}\r\n      >\r\n        <List>\r\n          {menuList.map((item, index) => (\r\n            <ListItem button key={item.label}>\r\n              <ListItemText primary={item.label} />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </div>\r\n    );\r\n  };\r\n  const handleSnackBarClose = event => {\r\n    setMessage(false);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    setLoading(props.loading);\r\n  }, [props.loading]);\r\n\r\n  React.useEffect(() => {\r\n    setMessage(props.error);\r\n  }, [props.error]);\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Snackbar\r\n        anchorOrigin={{\r\n          vertical: \"bottom\",\r\n          horizontal: \"center\"\r\n        }}\r\n        key={`${\"bottom\"},${\"center\"}`}\r\n        open={Boolean(message)}\r\n        onClose={handleSnackBarClose}\r\n        message={<span id=\"message-id\">{message}</span>}\r\n      />\r\n      <Toolbar>\r\n        <IconButton\r\n          edge=\"start\"\r\n          color=\"inherit\"\r\n          aria-label=\"menu\"\r\n          onClick={toggleDrawer(true)}\r\n        >\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <Typography variant=\"h6\" style={{ flex: 1 }}>\r\n          {title}\r\n        </Typography>\r\n        <IconButton\r\n          aria-label=\"show more\"\r\n          aria-haspopup=\"true\"\r\n          color=\"inherit\"\r\n          onClick={handleShowMore}\r\n        >\r\n          <MoreIcon />\r\n        </IconButton>\r\n      </Toolbar>\r\n      <Menu\r\n        id=\"popup-menu\"\r\n        anchorEl={anchorEl}\r\n        keepMounted\r\n        open={Boolean(anchorEl)}\r\n        onClose={handleClose}\r\n      >\r\n        <MenuItem onClick={handleClose} id=\"0\">\r\n          Refresh\r\n        </MenuItem>\r\n        <MenuItem onClick={handleClose} id=\"1\">\r\n          About\r\n        </MenuItem>\r\n      </Menu>\r\n\r\n      <SwipeableDrawer\r\n        open={open}\r\n        onClose={toggleDrawer(false)}\r\n        onOpen={toggleDrawer(true)}\r\n      >\r\n        {generateDrawerList()}\r\n      </SwipeableDrawer>\r\n      {loading && <LinearProgress />}\r\n    </AppBar>\r\n  );\r\n}\r\nexport default CustomAppBar;\r\n","let instance = null;\r\n\r\nclass CAPIHelper {\r\n  // Using Singleton\r\n  constructor() {\r\n    if (!instance) {\r\n      // Make sure is only one instance.\r\n      instance = this;\r\n    }\r\n\r\n    this._type = \"default\";\r\n    return instance;\r\n  }\r\n\r\n  debugValue(value) {\r\n    console.log(\"CAPIHelper\", value);\r\n  }\r\n\r\n  static googleSheetURL() {\r\n    if (instance._type === \"default\") {\r\n      return \"https://script.google.com/macros/s/AKfycbyWx63L82e2DqT50ILpYL6rpGXakBaRteP-gzqdg-tnI1-xTEs/exec\";\r\n    } else {\r\n      //e.g. this._type == \"url2\";\r\n      return \"https://script.google.com/macros/s/AKfycbz6dsPaXOboi_ops9RaGAT1msjak4QTob1Blv8XR5ySxSrEmgVm/exec\";\r\n    }\r\n  }\r\n\r\n  get type() {\r\n    return this._type;\r\n  }\r\n\r\n  set type(value) {\r\n    this._type = value;\r\n  }\r\n}\r\n\r\nexport default CAPIHelper;\r\n","import React from \"react\";\r\n\r\nfunction LoopRender(props) {\r\n  //Props must have items in array.\r\n  const [data, setData] = React.useState(props.data);\r\n  React.useEffect(() => {\r\n    setData(props.data);\r\n    return () => {\r\n      setData([]);\r\n    };\r\n  }, [props.data]);\r\n  return (\r\n    <ul>\r\n      {data.map((item, index) => (\r\n        <li key={index}>{item.Name}</li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default LoopRender;\r\n","import React from \"react\";\r\nimport CustomAppBar from \"./../widgets/CustomAppBar\";\r\nimport CAPIHelper from \"./../utils/CAPIHelper\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport LoopRender from \"./../utils/LoopRender\";\r\nimport axios from \"axios\";\r\n\r\nfunction Home() {\r\n  // In Function component u have the freedom to execute functions and hooks within your main functions.\r\n  const [title] = React.useState(\r\n    \"Advance Use of UseEffect and UseState in Function Components\"\r\n  );\r\n  const [item, setItem] = React.useState([]);\r\n  const [loaded, setLoaded] = React.useState(false);\r\n  const [snackbar, setSnackbar] = React.useState(false);\r\n  const [refresh, setRefresh] = React.useState(true);\r\n\r\n  // The boilerplate code for useEffect is...\r\n  // useEffect(() => {\r\n  //   codes you want to run. Normally is for fetching and updating props value into state.\r\n  //   return () => {\r\n  //     cleanup code after component is disposed e.g. deleteChatConnection to free up memory etc.\r\n  //   };\r\n  // }, [stateYouWantToWatch])\r\n\r\n  React.useEffect(() => {\r\n    if (refresh) {\r\n      // You can reduce timeout to see error in effect.\r\n      const timeOutInMiliseconds = 2000;\r\n      const apiHelper = new CAPIHelper();\r\n      apiHelper.type = \"default\";\r\n      setLoaded(true);\r\n      setItem([]);\r\n\r\n      const fetchData = async () => {\r\n        await axios\r\n          .get(apiHelper.constructor.googleSheetURL(), {\r\n            timeout: timeOutInMiliseconds\r\n          })\r\n          .then(function(response) {\r\n            setItem(response.data.Result);\r\n            setLoaded(false);\r\n          })\r\n          .catch(function(error) {\r\n            setSnackbar(\r\n              \"Error in communicating to server. Refresh and try again\"\r\n            );\r\n            setLoaded(false);\r\n          })\r\n          .finally(function() {\r\n            console.log(\"axios task complete!\");\r\n            setRefresh(false);\r\n          });\r\n      };\r\n      fetchData();\r\n    }\r\n    // by adding [] empty array useEffect becomes a componentDidMount behaviour\r\n    // which executes once.\r\n    // If you want a state to be trigger a refresh again, pass in state name inside [] instead.\r\n    // in this case, I use refresh as a command.\r\n  }, [refresh]);\r\n\r\n  const handleMenuClick = event => {\r\n    // Watch this handleMenuClick how it is assigned from props.\r\n    // It catches a event bubbled from the child CloseMenu event.\r\n\r\n    switch (event.currentTarget.getAttribute(\"id\")) {\r\n      case \"0\":\r\n        // By toggleing refresh state will trigger the useEffect again,\r\n        // because we use [refresh] and it is watching that particular state.\r\n        setRefresh(true);\r\n        break;\r\n      case \"1\":\r\n        setSnackbar(title);\r\n        break;\r\n      default:\r\n        setSnackbar(title);\r\n        break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <CustomAppBar\r\n        title={title}\r\n        loading={loaded}\r\n        error={snackbar}\r\n        handleMenuClick={handleMenuClick}\r\n      />\r\n      <Box p={2}>\r\n        <LoopRender data={item}></LoopRender>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Home from \"./components/pages/Home\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Home></Home>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}